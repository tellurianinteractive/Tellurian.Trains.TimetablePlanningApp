@using Tellurian.Trains.Scheduling.Model
@using Tellurian.Trains.Scheduling.Extensions

@if (Current is null)
{

}
else
{
    <div>
        <h3>@Current.Description</h3>
        <input id="toggleAxis" type="checkbox" @onchange="ToggleAxis" />
        <label for="toggleAxis">Check to vertical time axis</label>
    </div>
    <div>
        <svg style="border: 1pt solid black " height="@Current.Height" width="@Current.Width" @onclick="OnClick" @onmousedown="OnMouseDown">
            @for (var time = Current.StartTime; time <= Current.EndTime; time += TimeSpan.FromHours(1))
            {
                var hourOffset = Current.TimeAxisLabelOffset(time);
                <text>
                    <text class="@Current.OrientationCss("time")" x="@hourOffset.X" y="@hourOffset.Y">@time.Hours</text>
                </text>
                var timeLine = Current.TimeLine(time);
                <line class="timeline" x1="@timeLine.Start.X" y1="@timeLine.Start.Y" x2="@timeLine.End.X" y2="@timeLine.End.Y"></line>
            }

            @for (var s = 0; s < Current.Stations.Length; s++)
            {
                var stationOffset = Current.StationLabelOffset(s);
                var kmOffset = Current.KmLabelOffset(s);
                <text>
                    <text>
                        <tspan x="@stationOffset.X" y="@stationOffset.Y" class="@Current.OrientationCss("stationname")">@Current.Stations[s].NameLabel()</tspan>
                        <tspan x="@kmOffset.X" y="@kmOffset.Y" class="@Current.OrientationCss("stationkm")">@Current.Stations[s].KmLabel()</tspan>
                    </text>
                </text>


                @for (var t = 0; t < Current.Stations[s].Tracks.Length; t++)
                {
                    var track = Current.Stations[s].Tracks[t];
                    var trackNumber = Current.TrackNumberOffset(s, t);
                    <text>
                        <text class="@Current.OrientationCss("number")" x="@trackNumber.X" y="@trackNumber.Y">@track.Number</text>
                    </text>
                    var trackLine = Current.TrackLine(s, t);
                    <line stroke="@TrackColor(track)" x1="@trackLine.Start.X" y1="@trackLine.Start.Y" x2="@trackLine.End.X" y2="@trackLine.End.Y"></line>
                }
            }
        </svg>
    </div>
}

<br />
<ul>
    @foreach (var e in Events)
    {
        <li>@e.Type (@e.Args.OffsetX @e.Args.OffsetY) (@e.Args.ClientX @e.Args.ClientY) (@e.Args.ScreenX @e.Args.ScreenY)</li>
    }
</ul>

@code
{
    [Parameter] public IEnumerable<TimetableStretch>? TimetableStretches { get; set; }

    TimetableStretch? Current;
    bool ShowVertical;

    string TrackColor(StationTrack t) => t.HasPlatform ? "#404040" : t.IsScheduled ? "#bfbfbf" : "#ff8080";

    void ToggleAxis()
    {
        ShowVertical = !ShowVertical;
        if (Current is not null) Current = Current with { TimeAxisDirection = ShowVertical ? TimeAxisDirection.Vertical : TimeAxisDirection.Horisontal };
    }

    List<(MouseEventArgs Args, string Type)> Events = new List<(MouseEventArgs, string)>();

    protected override void OnParametersSet()
    {
        Current = TimetableStretches?.FirstOrDefault();
        if (Current is not null) Current = Current with { TimeAxisDirection = ShowVertical ? TimeAxisDirection.Vertical : TimeAxisDirection.Horisontal };
    }

    void OnClick(MouseEventArgs e)
    {
        Events.Add((e, nameof(OnClick)));
    }

    void OnMouseDown(MouseEventArgs e)
    {

        //Events.Add((e, nameof(OnMouseDown)));
        //StateHasChanged();
        // Find out what object was clicked:
        // A train between two stations: dragging it moves the rest of the train forwards or backwards in time. Check limits: train part not affected by the move, and start and end limits of schedule.
        // An arrival at a station: dragging it moves the time forwards or backwards in time. Check limits: train part not affected by the move, and start and end limits of schedule.
        // A departure at a station: dragging it moves the time forwards or backwards in time. Check limits: train part not affected by the move, and start and end limits of schedule.
        // A wait at a station: dragging between tracks.
    }

    void OnMouseUp(MouseEventArgs e)
    {
        //Events.Add((e, nameof(OnMouseUp)));
        //StateHasChanged();
        // If object is selected: ends the dragging

    }

    void OnMouseMove(MouseEventArgs e)
    {
        //Events.Add(e);
        //StateHasChanged();
        // If object is selected: performs the dragging
    }

    void OnMouseOut(MouseEventArgs e)
    {
        //Events.Add((e, nameof(OnMouseOut)));
        //StateHasChanged();
        // Cancels operations?
    }

    void OnMouseOver(MouseEventArgs e)
    {
        //Events.Add((e, nameof(OnMouseOver)));
        //StateHasChanged();
        // Highlights objects that are selectable? This is similar to actuallt select something.
    }
}